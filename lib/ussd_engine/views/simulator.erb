<!DOCTYPE html>
<html>
  <head>
    <title>USSDEngine Simulator</title>
    <style>
      .content {
        width: 320px;
        margin: 100px auto;
      }
      .label {
        display: inline-block;
        width: 80px;
        font-weight: bold;
      }
      .value {
        display: inline;
      }
      .value select, input {
        width: 200px;
      }
      .field {
        margin: 5px;
      }
      #screen {
        border: 1px black solid;
        height:400px;
        width:300px;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 10px 5px;
      }
      #char-count {
        text-align: center;
        font-size: 10px;
      }
      .hidden {
        display: none;
      }
    </style>
  </head>
<body>
  <div class="content">
    <div class="field <%=  show_options ? '' : 'hidden' %>">
      <div class="label">Provider </div>
      <div class="value">
        <select id="provider">
          <option <%=  default_provider == :nalo ? 'selected' : '' %> value="nalo">Nalo</option>
          <option <%=  default_provider == :nsano ? 'selected' : '' %> value="nsano">Nsano</option>
        </select>
      </div>
    </div>

    <div class="field <%=  show_options ? '' : 'hidden' %>">
      <div class="label">Endpoint </div>
      <div class="value">
        <input id="endpoint" value="<%= default_endpoint %>" />
      </div>
    </div>

    <div class="field <%=  show_options ? '' : 'hidden' %>">
      <div class="label">MSISDN </div>
      <div class="value">
        <input id="msisdn" value="<%= default_msisdn %>" />
      </div>
    </div>
    
    <div id="screen"></div>
    <div id="char-count"></div>

    <div class="field">
      <input id="data" disabled> <button id="respond" disabled>Respond</button>
    </div>

    <div class="field">
      <button id="initiate" disabled>Initiate</button>
      <button id="reset" disabled>Reset</button>
    </div>
  </div>

  <script>
    // Config
    const pagesize = <%= pagesize %>

    // View
    const $screen = document.getElementById('screen')
    const $charCount = document.getElementById('char-count')

    const $provider = document.getElementById('provider')
    const $endpoint = document.getElementById('endpoint')
    const $msisdn = document.getElementById('msisdn')

    const $data = document.getElementById('data')
    const $respondBtn = document.getElementById('respond')
    const $initiateBtn = document.getElementById('initiate')
    const $resetBtn = document.getElementById('reset')

    $provider.addEventListener('change', function (e) {
      state.provider = $provider.value
      render()
    }, false)

    $endpoint.addEventListener('keyup', function (e) {
      state.endpoint = $endpoint.value
      render()
    }, false)

    $msisdn.addEventListener('keyup', function (e) {
      state.msisdn = $msisdn.value
      render()
    }, false)

    $initiateBtn.addEventListener('click', function (e) {
      makeRequest()
    }, false)

    $resetBtn.addEventListener('click',function(e){
      reset()
    }, false)

    $respondBtn.addEventListener('click', function (e) {
      makeRequest()
    }, false)

    function disableInputs() {
      $data.disabled = 'disabled'
      $respondBtn.disabled = 'disabled'
      $initiateBtn.disabled = 'disabled'
      $resetBtn.disabled = 'disabled'
      $data.disabled = 'disabled'
    }

    function enableResponse() {
      $data.disabled = false
      $respondBtn.disabled = false
      $resetBtn.disabled = false
    }

    function display(text) {
      $screen.innerText = text.substr(0, pagesize)
      if(text.length > 0)
        $charCount.innerText = `${text.length} chars`
      else
        $charCount.innerText = ''
    }

    function render() {
      disableInputs()

      if(!state.isRunning){
        if(state.provider && state.endpoint && state.msisdn)
          $initiateBtn.disabled = false
        else
          $initiateBtn.disabled = 'disabled'
      }
      else {
        enableResponse()
      }
    }

    // State
    const state = {}

    function reset(shouldRender) {
      state.isRunning = false
      state.provider = $provider.value
      state.endpoint = $endpoint.value
      state.msisdn = $msisdn.value

      $data.value = null

      display("")
      if(shouldRender !== false) render()
    }


    // API

    function makeRequest() {
      var data = {}
      
      switch (state.provider) {
        case "nalo":
          data = {
            USERID: '12345678',
            MSISDN: state.msisdn,
            USERDATA: $data.value,
            MSGTYPE: !state.isRunning,
          }
          break;
        case "nsano":
          data = {
            network: 'MTN',
            msisdn: state.msisdn,
            msg: $data.value,
            UserSessionID: "12345",
          }
          break;
      
        default:
          alert(`Unhandled provider request: ${state.provider}`)
          return
      }

      disableInputs()
      fetch(state.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        redirect: 'error',
        body: JSON.stringify(data)
      })
        .then(response => {
          if (!response.ok) {
              throw Error(`${response.status}: ${response.statusText}`);
          }
          return response.json()
        })
        .then(data => {
          switch (state.provider) {
            case "nalo":
              display(data.MSG)
              state.isRunning = data.MSGTYPE
              break;
            case "nsano":
              display(data.USSDResp.title)
              state.isRunning = data.USSDResp.action == "input"
              break;
        
            default:
              alert(`Unhandled provider response: ${state.provider}`)
              return
          }
          $data.value = null
        })
        .catch(error => alert(error.message))
        .finally(render);
    }

    // run the app
    reset()
  </script>
</body>
</html>